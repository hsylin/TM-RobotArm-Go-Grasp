// Generated by gencpp from file iamech_ros/Wheel.msg
// DO NOT EDIT!


#ifndef IAMECH_ROS_MESSAGE_WHEEL_H
#define IAMECH_ROS_MESSAGE_WHEEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iamech_ros
{
template <class ContainerAllocator>
struct Wheel_
{
  typedef Wheel_<ContainerAllocator> Type;

  Wheel_()
    : bReady(0)
    , bMoving(0)
    , bError(0)
    , pos(0)
    , velocity(0)
    , ErrorCode(0)
    , temperature(0)
    , volt(0)  {
    }
  Wheel_(const ContainerAllocator& _alloc)
    : bReady(0)
    , bMoving(0)
    , bError(0)
    , pos(0)
    , velocity(0)
    , ErrorCode(0)
    , temperature(0)
    , volt(0)  {
  (void)_alloc;
    }



   typedef int32_t _bReady_type;
  _bReady_type bReady;

   typedef int32_t _bMoving_type;
  _bMoving_type bMoving;

   typedef int32_t _bError_type;
  _bError_type bError;

   typedef int32_t _pos_type;
  _pos_type pos;

   typedef int32_t _velocity_type;
  _velocity_type velocity;

   typedef int32_t _ErrorCode_type;
  _ErrorCode_type ErrorCode;

   typedef int32_t _temperature_type;
  _temperature_type temperature;

   typedef int32_t _volt_type;
  _volt_type volt;





  typedef boost::shared_ptr< ::iamech_ros::Wheel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iamech_ros::Wheel_<ContainerAllocator> const> ConstPtr;

}; // struct Wheel_

typedef ::iamech_ros::Wheel_<std::allocator<void> > Wheel;

typedef boost::shared_ptr< ::iamech_ros::Wheel > WheelPtr;
typedef boost::shared_ptr< ::iamech_ros::Wheel const> WheelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iamech_ros::Wheel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iamech_ros::Wheel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iamech_ros::Wheel_<ContainerAllocator1> & lhs, const ::iamech_ros::Wheel_<ContainerAllocator2> & rhs)
{
  return lhs.bReady == rhs.bReady &&
    lhs.bMoving == rhs.bMoving &&
    lhs.bError == rhs.bError &&
    lhs.pos == rhs.pos &&
    lhs.velocity == rhs.velocity &&
    lhs.ErrorCode == rhs.ErrorCode &&
    lhs.temperature == rhs.temperature &&
    lhs.volt == rhs.volt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iamech_ros::Wheel_<ContainerAllocator1> & lhs, const ::iamech_ros::Wheel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iamech_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iamech_ros::Wheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iamech_ros::Wheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iamech_ros::Wheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iamech_ros::Wheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iamech_ros::Wheel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iamech_ros::Wheel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iamech_ros::Wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb0e446b2d87810af5b33fbf4f7f9055";
  }

  static const char* value(const ::iamech_ros::Wheel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb0e446b2d87810aULL;
  static const uint64_t static_value2 = 0xf5b33fbf4f7f9055ULL;
};

template<class ContainerAllocator>
struct DataType< ::iamech_ros::Wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iamech_ros/Wheel";
  }

  static const char* value(const ::iamech_ros::Wheel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iamech_ros::Wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 bReady\n"
"int32 bMoving\n"
"int32 bError\n"
"int32 pos\n"
"int32 velocity\n"
"int32 ErrorCode\n"
"int32 temperature\n"
"int32 volt\n"
;
  }

  static const char* value(const ::iamech_ros::Wheel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iamech_ros::Wheel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bReady);
      stream.next(m.bMoving);
      stream.next(m.bError);
      stream.next(m.pos);
      stream.next(m.velocity);
      stream.next(m.ErrorCode);
      stream.next(m.temperature);
      stream.next(m.volt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Wheel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iamech_ros::Wheel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iamech_ros::Wheel_<ContainerAllocator>& v)
  {
    s << indent << "bReady: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bReady);
    s << indent << "bMoving: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bMoving);
    s << indent << "bError: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bError);
    s << indent << "pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pos);
    s << indent << "velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "ErrorCode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ErrorCode);
    s << indent << "temperature: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "volt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.volt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAMECH_ROS_MESSAGE_WHEEL_H
