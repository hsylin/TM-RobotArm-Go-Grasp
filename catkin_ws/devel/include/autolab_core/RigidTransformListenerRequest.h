// Generated by gencpp from file autolab_core/RigidTransformListenerRequest.msg
// DO NOT EDIT!


#ifndef AUTOLAB_CORE_MESSAGE_RIGIDTRANSFORMLISTENERREQUEST_H
#define AUTOLAB_CORE_MESSAGE_RIGIDTRANSFORMLISTENERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autolab_core
{
template <class ContainerAllocator>
struct RigidTransformListenerRequest_
{
  typedef RigidTransformListenerRequest_<ContainerAllocator> Type;

  RigidTransformListenerRequest_()
    : from_frame()
    , to_frame()  {
    }
  RigidTransformListenerRequest_(const ContainerAllocator& _alloc)
    : from_frame(_alloc)
    , to_frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _from_frame_type;
  _from_frame_type from_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _to_frame_type;
  _to_frame_type to_frame;





  typedef boost::shared_ptr< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RigidTransformListenerRequest_

typedef ::autolab_core::RigidTransformListenerRequest_<std::allocator<void> > RigidTransformListenerRequest;

typedef boost::shared_ptr< ::autolab_core::RigidTransformListenerRequest > RigidTransformListenerRequestPtr;
typedef boost::shared_ptr< ::autolab_core::RigidTransformListenerRequest const> RigidTransformListenerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator1> & lhs, const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.from_frame == rhs.from_frame &&
    lhs.to_frame == rhs.to_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator1> & lhs, const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autolab_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "926bcdc77e020fe1b0dab9093941bca3";
  }

  static const char* value(const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x926bcdc77e020fe1ULL;
  static const uint64_t static_value2 = 0xb0dab9093941bca3ULL;
};

template<class ContainerAllocator>
struct DataType< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autolab_core/RigidTransformListenerRequest";
  }

  static const char* value(const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string from_frame\n"
"string to_frame\n"
;
  }

  static const char* value(const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.from_frame);
      stream.next(m.to_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RigidTransformListenerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autolab_core::RigidTransformListenerRequest_<ContainerAllocator>& v)
  {
    s << indent << "from_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.from_frame);
    s << indent << "to_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.to_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOLAB_CORE_MESSAGE_RIGIDTRANSFORMLISTENERREQUEST_H
