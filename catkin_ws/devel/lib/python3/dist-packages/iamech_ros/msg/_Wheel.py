# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iamech_ros/Wheel.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Wheel(genpy.Message):
  _md5sum = "cb0e446b2d87810af5b33fbf4f7f9055"
  _type = "iamech_ros/Wheel"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 bReady
int32 bMoving
int32 bError
int32 pos
int32 velocity
int32 ErrorCode
int32 temperature
int32 volt
"""
  __slots__ = ['bReady','bMoving','bError','pos','velocity','ErrorCode','temperature','volt']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bReady,bMoving,bError,pos,velocity,ErrorCode,temperature,volt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Wheel, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bReady is None:
        self.bReady = 0
      if self.bMoving is None:
        self.bMoving = 0
      if self.bError is None:
        self.bError = 0
      if self.pos is None:
        self.pos = 0
      if self.velocity is None:
        self.velocity = 0
      if self.ErrorCode is None:
        self.ErrorCode = 0
      if self.temperature is None:
        self.temperature = 0
      if self.volt is None:
        self.volt = 0
    else:
      self.bReady = 0
      self.bMoving = 0
      self.bError = 0
      self.pos = 0
      self.velocity = 0
      self.ErrorCode = 0
      self.temperature = 0
      self.volt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8i().pack(_x.bReady, _x.bMoving, _x.bError, _x.pos, _x.velocity, _x.ErrorCode, _x.temperature, _x.volt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.bReady, _x.bMoving, _x.bError, _x.pos, _x.velocity, _x.ErrorCode, _x.temperature, _x.volt,) = _get_struct_8i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8i().pack(_x.bReady, _x.bMoving, _x.bError, _x.pos, _x.velocity, _x.ErrorCode, _x.temperature, _x.volt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.bReady, _x.bMoving, _x.bError, _x.pos, _x.velocity, _x.ErrorCode, _x.temperature, _x.volt,) = _get_struct_8i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8i = None
def _get_struct_8i():
    global _struct_8i
    if _struct_8i is None:
        _struct_8i = struct.Struct("<8i")
    return _struct_8i
